#!/bin/sh

#########################################
# IDSmenu script for IDS Sensor         #
# SURFnet IDS                           #
# Version 1.02.04                       #
# 08-06-2006                            #
# Jan van Lith & Kees Trippelvitz       #
# Modified by Peter Arts                #
#########################################

#########################################################################################
# Copyright (C) 2005 SURFnet                                                            #
# Authors Jan van Lith & Kees Trippelvitz                                               #
# Modified by Peter Arts                                                                #
#                                                                                       #
# This program is free software; you can redistribute it and/or                         #
# modify it under the terms of the GNU General Public License                           #
# as published by the Free Software Foundation; either version 2                        #
# of the License, or (at your option) any later version.                                #
#                                                                                       #
# This program is distributed in the hope that it will be useful,                       #
# but WITHOUT ANY WARRANTY; without even the implied warranty of                        #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                         #
# GNU General Public License for more details.                                          #
#                                                                                       #
# You should have received a copy of the GNU General Public License                     #
# along with this program; if not, write to the Free Software                           #
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.       #
#                                                                                       #
# Contact ids@surfnet.nl                                                                #
#########################################################################################

#############################################
# Changelog:
# 1.02.04 Key and certificate check bugfix
# 1.02.03 Initial release
#############################################

################
# Variables    #
################
basedir="/cdrom/scripts"
. $basedir/scripts.conf

################
#    Traps     #
################
# Trapping CTRL-C and CTRL-Z
#trap '' 2 20 

################
# Start script #
################
# Getting keyname.
keyname=`ls $basedir | grep "sensor" | grep -v "bcrt" | grep "crt" | cut -d "." -f1` 

# Status function.
status() {
  clear

  # Displaying the keyname
  echo -e "${YELLOW}Keyname: \t\t$keyname${NORMAL}"

  # Checking interfaces for IP address
  devices="$(awk -F: '/eth.:|tr.:|br.:/{print $1}' /proc/net/dev )"
  ifcount=0
  for dev in $devices
  do
    ipcount=`ifconfig $dev | grep "inet addr" | wc -l`
    if [ $ipcount != 0 ]; then
      ifip=`ifconfig $dev | grep "inet addr" | cut -d":" -f2 | cut -d" " -f1`
      echo -e "${YELLOW}Interface $dev: \t\t$ifip ${NORMAL}"
      ifcount=`expr $ifcount + 1`
    fi
  done
  if [ $ifcount == 0 ]; then
    echo -e "${RED}No IP address found on any interface${NORMAL}"
  else
    # Check if the server is reachable on the OpenVPN port (1194).
    echo -en "${YELLOW}Internet connection: \t${NORMAL}"
    checkinet=`nmap -p 1194 $server -P0 2>/dev/null | grep 1194 | wc -l`
    if [ $checkinet == 1 ]; then
      echo -e "${YELLOW}UP${NORMAL}"
    else
      echo -e "${RED}DOWN${NORMAL}"
    fi
  fi

  # Checking for ssh daemon
  echo -en "${YELLOW}SSH daemon: \t\t${NORMAL}"
  checkssh=`ps -ef | grep sshd | wc -l`
  if [ $checkssh == 1 ]; then
    echo -e "${YELLOW}Running${NORMAL}"
  else
    echo -e "${YELLOW}Not running${NORMAL}"
  fi

  # Checking for existance of openVPN tunnel and bridge (br0).
  checkbr=`ip link show up | grep $br | wc -l`
  checkopenvpn=`ps -ef | grep openvpn | grep -v grep | wc -l`
  checkdisabled=`cat $basedir/$keyname.crt | grep "DISABLED" | wc -l`
  if [ $checkdisabled == 1 ]; then
    echo -e "${RED}Sensor status: \t\tDISABLED${NORMAL}"
  else
    if [ $checkbr == 1 ] && [ $checkopenvpn == 1 ]; then 
      # The bridge is present and OpenVPN is running. The sensor is UP.
      echo -e "${YELLOW}Sensor status: \t\tUP${NORMAL}"
    else
      echo -e "${RED}Sensor status: \t\tDOWN${NORMAL}"
    fi
  fi
  # Showing bridge status.
  if [ $checkbr == 0 ]; then
    echo -e "${RED}Bridge status: \t\tDOWN${NORMAL}"
  else     
     echo -e "${YELLOW}Bridge status: \t\tUP${NORMAL}"
  fi
  # Showing openVPN status.
  if [ $checkopenvpn == 0 ]; then
    echo -e "${RED}VPN Tunnel status: \tDOWN${NORMAL}"
  else     
    echo -e "${YELLOW}VPN Tunnel status: \tUP${NORMAL}"
  fi
  # Checking client.conf for key and crt configuration.
  confcrt=`cat $basedir/client.conf | grep ".crt" | wc -l`
  confkey=`cat $basedir/client.conf | grep "sensor" | grep "key" | wc -l`
  if [ $confcrt == 2 ] && [ $confkey == 1 ]; then
    echo -e "${YELLOW}Checking client.conf: \tOK${NORMAL}"
  else
    echo -e "${RED}Checking client.conf: \tFAILED${NORMAL}"
  fi
  # Checking if the sensor keys are valid.
  existkey=`ls $basedir | grep ".key" | wc -l`
  if [ $existkey == 0 ]; then
    echo -e "${RED}Checking sensor keys: \tFAILED${NORMAL}"
  else
    if [ $checkdisabled != 1 ]; then
      checkkey=`tail -1 $basedir/$keyname.key | grep "^-----END [A-Z ]\+ PRIVATE KEY-----$"`
      checkcrt=`head -1 $basedir/$keyname.crt | grep "^Certificate:"`
      if [ -n "$checkkey" ] && [ -n "$checkcrt" ]; then
        echo -e "${YELLOW}Checking sensor keys: \tOK${NORMAL}"
      else
        echo -e "${RED}Checking sensor keys: \tFAILED${NORMAL}"
      fi
    fi
  fi
  # Checking if the disk where the sensor is running from has enough diskspace for updates.
  space=`df | grep cdrom | awk '{ print $4}'`
  if [ $space -gt 330000 ]; then
    echo -e "${YELLOW}Checking diskspace: \tOK${NORMAL}"
  else
    echo -e "${RED}Checking diskspace: \tFAILED${NORMAL}"
  fi
  `touch $basedir/touchmenu.tmp`
  if [ $? != 0 ]; then
    echo -e "${RED}Checking R/W Status: \tFAILED${NORMAL}"
  else
    echo -e "${YELLOW}Checking R/W Status: \tOK${NORMAL}"
    rm -f $basedir/touchmenu.tmp
  fi
}

# Login function.
login()
{
  clear
  /sbin/getty 38400 tty1
}

# Update function, starts the update script.
update()
{
  clear
  sh $basedir/update
}

# Start function, starts the startclient script to enable the tunnel.
start()
{
  clear
  echo
  checkbr=`ip link show up | grep $br | wc -l`
  checkopenvpn=`ps -ef | grep openvpn | grep -v grep | wc -l`
  if [ $checkbr == 1 ] && [ $checkopenvpn == 1 ]; then
    echo -e "${RED}Sensor is already up.${NORMAL}"
  else
    sh $basedir/startclient 0
  fi
}

# Stop function, starts the stopclient script to disable the tunnel.
stop()
{
  clear
  sh $basedir/stopclient
}

# Configure network function, starts the network_config script to change network settings
network()
{
  clear
  sh $basedir/network_config
}

ssh()
{
  # Check if SSH is running.
  sshcheck=`ps -ef | grep sshd | grep -v grep | head -n1 | wc -l`
  if [ $sshcheck != 0 ]; then
    echo -en "${YELLOW}Disabling the SSH daemon: \t\t${NORMAL}"
    disablessh=`killall sshd`
    if [ $? == 0 ]; then
      echo -e "${YELLOW}OK${NORMAL}"
    else
      echo -e "${RED}FAILED${NORMAL}"
    fi
  else
    echo -e "${YELLOW}Enabling the SSH daemon: \t\t${NORMAL}"
    enablessh=`/etc/init.d/ssh start`
    if [ $? == 0 ]; then
      echo -e "${YELLOW}OK${NORMAL}"
    else
      echo -e "${RED}FAILED${NORMAL}"
    fi
  fi
}

# While loop that shows the menu.
while : 
do
  echo "
      What would you like to do:
  	  1. Get status   
          2. Start Sensor 
          3. Stop Sensor 
          4. Update 
          5. Login 
          6. Configure network
          7. Enable/Disable SSH
          8. Reboot
          9. Shutdown
      Please select one of the above (1-8):"

  read choice
  echo

  case "$choice"
  in
    1) status;;
    2) start;;
    3) stop;;
    4) update;;
    5) login;;
    6) network;;
    7) ssh;;
    8) clear
       init 6
       exit;;
    9) clear
       init 0
       exit;;
    0) exit;;
    *) clear
       echo -e "${RED}Unknown choice. Try again.${NORMAL}";;
  esac
done
