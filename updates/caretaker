#!/usr/bin/perl

#########################################
# Caretaker script for the VLAN tunnels #
# SURFids 2.00.03                       #
# Changeset 007                         #
# 22-05-2008                            #
# Jan van Lith & Kees Trippelvitz       #
#########################################

###################
# Changelog:
# 007 Moved print state to the correct spot
# 006 Fixed reconnect issue
# 005 Removed default gw deletion
# 004 Modified info header and changelog
# 003 Fixed layout & code indentation
# 002 Fixed bug with gw 
# 001 Initial release
###################

use Time::localtime qw(localtime);
use IO::Socket::INET;

$basedir = "/cdrom/scripts";
do "$basedir/sensor.conf";
do "$basedir/network_if.conf";
require "$basedir/functions.inc.pl";

sub getdatetime {
  my $stamp = time();
  $tm = localtime($stamp);
  my $ss = $tm->sec;
  my $mm = $tm->min;
  my $hh = $tm->hour;
  my $dd = $tm->mday;
  my $mo = $tm->mon + 1;
  my $yy = $tm->year + 1900;
  if ($ss < 10) { $ss = "0" .$ss; }
  if ($mm < 10) { $mm = "0" .$mm; }
  if ($hh < 10) { $hh = "0" .$hh; }
  if ($dd < 10) { $dd = "0" .$dd; }
  if ($mo < 10) { $mo = "0" .$mo; }
  my $datestring = "$dd-$mo-$yy $hh:$mm:$ss";
  return $datestring;
}

$tunnel = $ARGV[0];

$chkcare = `ps -ef | grep -v grep | grep -v $$ | grep caretaker | wc -l`;
chomp($chkcare);

if ($chkcare != 0) {
  exit;
}

@vlan_ar = `netstat -natep | grep "127.0.0.1" | grep openvpn | awk '{print \$4}' | awk -F":" '{print \$2}'`;

open(LOG, ">> /var/log/caretaker.log");
$ts = getdatetime();

while (0 == 0) {
  foreach $manport (@vlan_ar) {
    $try = 0;
    chomp($manport);
    my $sock = new IO::Socket::INET (
        PeerAddr => '127.0.0.1',
        PeerPort => $manport,
        Proto => 'tcp',
        );
    $conn = 0;
    $line = "";
    while ($conn == 0) {
      if (!<$sock>) {
        $conn = 1;
      }
      $nmapcheck = 0;
      $reconnect = 0;
      print $sock "state\n";
      while ($line = <$sock>) {
        chomp($line);
        if ($line =~ /.*RECONNECTING.*/) {
          $reconnect = 1;
          last;
        } elsif ($line =~ /.*CONNECTED.*/) {
          last;
        } elsif ($line eq "END") {
          last;
        }
      }
      if ($reconnect == 1) {
        # OpenVPN is trying to reconnect
        # Now we need to add default gateway, etc
        $ts = getdatetime();
        print LOG "[$ts] $manport RECONNECTING\n";
        $gw = `ps -ef | grep -v grep | grep openvpn | grep "127.0.0.1 $manport"| awk -F"gw" '{print \$2}' | awk '{print \$1}'`;
        chomp($gw);
        `ip route del default 2>/dev/null`;
        `ip route add default via $gw 2>/dev/null`;
        $if = $manport - 1000;
        $nmapchk = `nmap -e br$if -p 1194 $server -P0 2>/dev/null | grep 1194 | grep open | wc -l`;
        chomp($nmapchk);
        if ($nmapchk == 1) {
          $ts = getdatetime();
          print LOG "[$ts] $manport RELEASED\n";
          print $sock "hold release\n";
          $rel = 0;
          $tryrel = 0;
          sleep 5;
          while ($rel == 0) {
            $line = <$sock>;
            print $sock "state\n";
            if ($line =~ /.*CONNECTED.*/) {
              $ts = getdatetime();
              print LOG "[$ts] $manport CONNECTED AFTER RELEASE\n";
              # c005
#              `ip route del default 2>/dev/null`;
              $rel = 1;
            }
            if ($tryrel == 25) {
              $ts = getdatetime();
              print LOG "[$ts] $manport FAILED TO CONNECT AFTER RELEASE\n";
              # c005
#              `ip route del default 2>/dev/null`;
              $rel = 1;
            }
            sleep 2;
            $tryrel++;
          }
          $conn = 1;
        }
        $try++;
        if ($try == 2) {
          $conn = 1;
        } else {
          sleep 2;
        }
      } elsif ($line =~ /.*CONNECTED.*/) {
        sleep 1;
        $conn = 1;
      }
    }
  }
  sleep 2;
}

