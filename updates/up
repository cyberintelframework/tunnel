#!/usr/bin/perl

#########################################
# UP script for SURFnet IDS Sensor      #
# SURFnet IDS                           #
# Version 1.04.04                       #
# 06-06-2007                            #
# Jan van Lith & Kees Trippelvitz       #
#########################################

###################
# Changelog:
# 1.04.04 Added sleep time
# 1.04.03 Removed logging messages
# 1.04.02 More stable distribution of the VLAN's
# 1.04.01 Initial release
###################
use Time::localtime qw(localtime);

$basedir = "/cdrom/scripts";
do "$basedir/sensor.conf";
require "$basedir/functions.inc.pl";

$tunnel = $ARGV[0];
$gw = $ARGV[1];
$br = $ARGV[2];
$pid = $$;
$sleep = $ARGV[0];

sub getdatetime {
  my $stamp = time();
  $tm = localtime($stamp);
  my $ss = $tm->sec;
  my $mm = $tm->min;
  my $hh = $tm->hour;
  my $dd = $tm->mday;
  my $mo = $tm->mon + 1;
  my $yy = $tm->year + 1900;
  if ($ss < 10) { $ss = "0" .$ss; }
  if ($mm < 10) { $mm = "0" .$mm; }
  if ($hh < 10) { $hh = "0" .$hh; }
  if ($dd < 10) { $dd = "0" .$dd; }
  if ($mo < 10) { $mo = "0" .$mo; }
  my $datestring = "$dd-$mo-$yy $hh:$mm:$ss";
  return $datestring;
}

open(LOG, ">> $basedir/up.log");
$ts = getdatetime();
sleep $sleep;
print LOG "$ts [$tunnel] First Sleep: $sleep sec\n";

$chkrun = `ps -ef | grep "perl" | grep "up.pl $tunnel" | grep -v $pid | grep -v grep | wc -l`;
chomp($chkrun);
if ($chkrun != 0) {
  print LOG "$ts [$tunnel] CHKRUN: $chkrun\n";
  exit;
}
`echo $pid > /var/run/up$tunnel.pid`;

$tmpfile = `mktemp -p $basedir`;
chomp($tmpfile);
upplstatus($tunnel, "LOCK", $tmpfile);

$ts = getdatetime();
print LOG "$ts [$tunnel] GW: $gw\n";
print LOG "$ts [$tunnel] BR: $br\n";
$nmapchk = 0;
$checklock = 0;
$checkrun = 0;
$timer = 0;
$go = 0;

while ($nmapchk == 0) {
  $count_tun = `cat $basedir/tunnel.status | grep LOCK | awk -F":" '{print \$3}' | sort -r | head -n1`;
  chomp($count_tun);
  for ($i = 0; $i < $count_tun; $i++) {
    $next_tun = `cat $basedir/tunnel.status | grep LOCK | grep ":$i" | awk -F":" '{print \$1}'`;
    chomp($next_tun);
    if ("$next_tun" ne "") {
      $i = $count_tun;
    }
  }
  $ts = getdatetime();
  print LOG "$ts [$tunnel] NEXT_TUN: $next_tun\n";

  if ("$next_tun" eq "") {
    $mintun = $tunnel - 1;
    for ($i = $mintun; $i > 0; $i--) {
      $checklock = `cat $basedir/tunnel.status | grep "$i:" | grep LOCK | wc -l`;
      chomp($checklock);
      if ($checklock != 0) {
        $next_tun = $i;
        $i = 0;
      }
    }
  }
  $ts = getdatetime();
  print LOG "$ts [$tunnel] NEXT_TUN: $next_tun\n";
  if ($next_tun == $tunnel) {
    $go = 1;
  }

  $checkrun = `cat $basedir/tunnel.status | grep RUNNING | grep -v "$tunnel:" | wc -l`;
  chomp($checkrun);
  $ts = getdatetime();
  print LOG "$ts [$tunnel] CHECKRUN: $checkrun\n";
  if ($checkrun != 0) {
    $go = 0;
  } else {
    $go = 1;
  }

  if ($go == 1 || $run == 1) {
    upplstatus($tunnel, "RUNNING", $tmpfile);
    sleep 10;
    $run = 1;

    $ts = getdatetime();
    `ip route del default 2>/dev/null`;
    print LOG "$ts [$tunnel] Deleting default: $?\n";
    `ip route add default via $gw`;
    print LOG "$ts [$tunnel] Adding default: $?\n";
    $nmapchk = `nmap -e $br $server -p 1194 -P0 | grep 1194 | grep open | wc -l`;
    chomp($nmapchk);
    $ts = getdatetime();
    print LOG "$ts [$tunnel] NMAPCHECK: $nmapchk\n";
    if ($nmapchk == 0) {
      $timer = $timer + 5;
      $ts = getdatetime();
      print LOG "$ts [$tunnel] TIMER: $timer\n";
      if ($timer == $uppl_retry) {
        print LOG "$ts [$tunnel] SLEEP\n";
        upplstatus($tunnel, "SLEEP", $tmpfile);
        sleep $uppl_sleep;
        print LOG "$ts [$tunnel] WAKING UP\n";
        upplstatus($tunnel, "LOCK", $tmpfile);
        $run = 0;
        $timer = 0;
      }
    }
  } else {
    $c = `cat $basedir/tunnel.status | grep "$tunnel:LOCK" | wc -l`;
    chomp($c);
    if ($c == 0) {
      upplstatus($tunnel, "LOCK", $tmpfile);
    }
    $ts = getdatetime();
    print LOG "$ts [$tunnel] WAITING\n";
  }
  sleep 5;
}
$ts = getdatetime();
print LOG "$ts [$tunnel] Finished!\n";
close(LOG);
upplstatus($tunnel, "DONE", $tmpfile);

#remove pid file because up.pl is finished
`rm -f /var/run/up$tunnel.pid`;
