#!/usr/bin/perl

#########################################
# IDSmenu script for IDS Sensor
# SURFnet IDS
# Version 1.04.07
# 26-02-2007
# Jan van Lith & Kees Trippelvitz
#########################################

#############################################
# Changelog:
# 1.04.07 Fixed layout stuff
# 1.04.06 Added check on broadcast and gateway addresses
# 1.04.05 Added check on network config
# 1.04.04 Added printdelay and printresult for pings
# 1.04.03 Added network config check
# 1.04.02 Added SSH status
# 1.04.01 Initial release
#############################################

use File::Basename;

$basedir = "/cdrom/scripts/";
do "$basedir/sensor.conf";
require "$basedir/functions.inc.pl";
require "$basedir/network_if.conf";

$ip_error = 0;
$netconfstring = "[Network config]";

if ($netconf eq "vlan") {
  $statusif = "br1";
  $if = "br1";
} else {
  $statusif= $br;
  $if= $br;
}

### Sensor name ###
$sensor = getsensor();
printmsg("Sensor name:", $sensor);
  
### Sensor status ###
$chkstatus = chksensorstatus($statusif);
if ($chkstatus == 0) {
  printmsg("Sensor status:", "Active"); 
  ### OpenVPN status ###
  $chkopenvpn = chkopenvpn();
  printmsg("Checking OpenVPN status:", $chkopenvpn); 
} elsif ($chkstatus == 1) {
  printmsg("Sensor status:", "${r}Down${n}");
} else {
  printmsg("Sensor status:", "${r}Disabled${n}");
}

$chkssh = chkssh();
if ($chkssh == 0) {
  printmsg("SSH daemon:", "${y}Running${n}");
} else {
  printmsg("SSH daemon:", "${y}Stopped${n}");
}

# Getting the active interface
$if = getif();
printmsg("Retrieving active interface:", $if);  

$chk = chknetworkconf();
printmsg("Checking network config:", $chk);

### Network configuration method ###
printmsg("Network configuration method:", $netconf);

### ca.crt check ###
$chkca = chkca();
printmsg("Checking ca.crt:", $chkca);

if ($chkstatus != 2) {
  ### sensor.crt check ###
  $chkcert = chksensorcert();
  printmsg("Checking sensor certificate:", $chkcert);

  ### sensor.key check ###
  $chkkey = chksensorkey();
  printmsg("Checking sensor key:", $chkkey);
}

### Read/write check ###
$chkrw = chkrw();
printmsg("Checking read/write status:", $chkrw);
  
### Checking client.conf ###
$chkclient = chkclientconf();
printmsg("Checking client.conf:", $chkclient);
if ($chkclient != 0) {
  $fixclient = fixclientconf();
  printmsg("Fixing client.conf:", $fixclient);
}

### Checking network_if.conf ###
$chknetconf = chknetworkconf();
printmsg("Checking network_if.conf:", $chknetconf);
&prompt("Press enter to continue...");

if ($netconf eq "vlan") {
  #################
  # NETCONF: VLAN #
  #################
  $i = 1;
  for my $key (sort keys %vlan ) {
    $vlanid = $key;
    printmsg("${y}Checking VLAN${n}:\t\t", " $vlanid ");   
  
    ### Network configuration method ###
    $vlan_method = $vlan{$vlanid}{method};  
    printmsg("Network configuration method:", $vlan_method);   
    $br = "br$i";
    $vif = "$if.$vlanid";     

    if ($vlan_method eq "dhcp") {
      #####################
      # VLAN METHOD: DHCP #
      #####################

      ### Checking network config ###
      if ($chkstatus != 0) {
        printmsg("Sensor not active:", "info");
      } else {
        ### Checking gateway ###
        $if_gw = `cat /var/lib/dhcp3/dhcp$vlanid.lease | grep "routers" | awk '{print \$3}' |cut -d";" -f1 |tail -n1`;
        chomp ($if_gw);
        $chkgw = validip($if_gw);
        if ($chkgw == 0) {
          printmsg("$netconfstring Gateway:", $if_gw);
          `ip route add default via $if_gw`;
          if ($? != 0) {
            printmsg("Adding default route:", "false");
          } else {
            printdelay("$netconfstring Pinging gateway:");
            $chkgw = chkreach($if_gw);
            printresult($chkgw);
          }
        } else {
          printmsg("$netconfstring Gateway:", "false");
        }
        $if_nm = `cat /var/lib/dhcp3/dhcp$vlanid.lease| grep "subnet-mask" | awk '{print \$3}' | cut -d";" -f1 |tail -n1`;
        chomp($if_nm);
        printmsg("$netconfstring Netmask:", $if_nm);
        $if_bc = `cat /var/lib/dhcp3/dhcp$vlanid.lease| grep "broadcast" | awk '{print \$3}' | cut -d";" -f1 |tail -n1`;
        chomp($if_bc);
        printmsg("$netconfstring Broadcast:", $if_bc);
        
        ### Checking DNS nameserver ###
        $if_ns = getnetinfo("ns", $if);
        printmsg("$netconfstring Nameserver:", $if_ns);
        if ($if_ns !~ /^(1|2|3)$/) {
          printdelay("$netconfstring Pinging nameserver:");
          $chkname = chkreach($if_ns);
          printresult($chkname);
        }
      }
    } else {
      #######################
      # VLAN METHOD: STATIC #
      #######################
      if ($chkstatus != 0) {
        printmsg("Sensor not active:", "info");
      }

      printmsg("Active interface:", $vif);
      $if_ip = $vlan{$vlanid}{if_ip};
	
      # Netmask
      $if_nm = $vlan{$vlanid}{if_nm};   
      printmsg("$netconfstring Netmask:", $if_nm);
      $calcgw = gw($if_ip, $if_nm);

      # Gateway
      $if_gw = $vlan{$vlanid}{if_gw};
      if ($calcgw ne $if_gw) {
        printmsg("Possible typo in gateway address:", "warning");
      }
      if ($chkstatus == 0) {
        `ip route add default via $if_gw 2>/dev/null`;
        $chkgw = $?;
      }
      printmsg("$netconfstring Gateway:", $if_gw);

      if ($chkstatus == 0) {
        if ($chkgw == 0) {
          printdelay("$netconfstring Pinging gateway:");
          $chkgw = chkreach($if_gw);
          printresult($chkgw);
        } else {
          printmsg("Adding default gateway:", $chkgw);
        }
      }

      $if_bc = $vlan{$vlanid}{if_bc}; 
      $calcbc = bc($if_ip, $if_nm);
      if ($calcbc ne $if_bc) {
        printmsg("Possible typo in broadcast address:", "warning");
      }
      printmsg("$netconfstring Broadcast:", $if_bc);

      ### Checking DNS nameserver ###
      printmsg("$netconfstring Nameserver:", $if_ns);
      if ($chkgw == 0 && $chkstatus == 0) {
        printdelay("$netconfstring Pinging nameserver:");
        $chkname = chkreach($if_ns);
        printresult($chkname);
      }
    }

    if ($chkstatus == 0){
      ### Checking DNS resolving ###
      printdelay("Checking name resolving:");
      $chkresolv = getresolv($server);
      printresult($chkresolv);
     
      ### OpenVPN port status ###
      sleep 2;
      printdelay("Checking OpenVPN port:");
      $chkopenvpn = getportstatus($br, 1194);
      printresult($chkopenvpn);
  
      $updateserr = 0;
      ### Update port status ###
      printdelay("Checking updates port:");
      $chkupdates = getportstatus($br, 4443);
      printresult($chkupdates);

      ### Wget authentication check ###
      if ($checkcert == 0) {
        $wgetarg = "--no-check-certificate";
      } else {
        $wgetarg = "";
      }
      $chkwgetauth = chkwgetauth($wgetarg);
      printmsg("Checking wget authentication:", $chkwgetauth);

      if ($if_gw ne "false") {
        `ip route del default via $if_gw 2>/dev/null`;
      }
    }
    $i++ 
  }   
} else {
  ###########################
  # NETCONF: DHCP OR STATIC #
  ###########################

  $ip_error = 0;
  if ($chkstatus == 0) {
    $if = $br;
  }
  ### Active interface ###
  printmsg("Active interface:", $if);
  if ($if eq "false") {
    $ip_error = 1;
  }
  
  ### IP address active interface ###
  if ($ip_error == 1) {
    # Don't try to get the interface IP if there's no active interface.
    printmsg("Interface IP address:", "ignore");
  } else {
    # Active interface present, get IP.
    $if_ip = getifip($if);
    printmsg("Interface IP address:", $if_ip);
    if ($if_ip eq "false") {
      $ip_error = 1;
    }
  }
  
  ### Checking DNS resolving ###
  if ($ip_error == 1) {
    printmsg("Checking name resolving:", "ignore");
  } else {
    printdelay("Checking name resolving:");
    $chkresolv = getresolv($server);
    printresult($chkresolv);
    if ($chkresolv eq "false") {
      $ip_error = 1;
    } else {
      $chkresolv = 0;
    }
  }
  
  ### OpenVPN port status ###
  if ($ip_error == 1) {
    printmsg("Checking OpenVPN port:", "ignore");
  } else {
    printdelay("Checking OpenVPN port:");
    $chkopenvpn = getportstatus($if, 1194);
    printresult($chkopenvpn);
  }
  
  $updateserr = 0;
  ### Update port status ###
  if ($ip_error == 1) {
    printmsg("Checking updates port:", "ignore");
  } else {
    printdelay("Checking updates port:");
    $chkupdates = getportstatus($if, 4443);
    printresult($chkupdates);
    if ($chkupdates != 0) {
      $updateserr = 1;
    }
  }
  
  ### Wget authentication check ###
  if ($ip_error == 1 || $updateserr != 0) {
    printmsg("Checking wget authentication:", "ignore");
  } else {
    if ($checkcert == 0) {
      $wgetarg = "--no-check-certificate";
    } else {
      $wgetarg = "";
    }
    printdelay("Checking wget authentication:");
    $chkwgetauth = chkwgetauth($wgetarg);
    printresult($chkwgetauth);
  }
  
  if ($netconf eq "static") {
    ### Checking network config ###
    if ($ip_error != 1) {
      ### Checking gateway ###
      printmsg("$netconfstring Gateway:", $if_gw);
      if ($if_gw !~ /^(1|2|3)$/) {
        printdelay("$netconfstring Pinging gateway:");
        $chkgw = chkreach($if_gw);
	printresult($chkgw);
      }
      printmsg("$netconfstring Netmask:", $if_nm);
      printmsg("$netconfstring Broadcast:", $if_bc);
    }
  
    ### Checking DNS nameserver ###
    printmsg("$netconfstring Nameserver:", $if_ns);
    if ($if_ns !~ /^(1|2|3)$/) {
      printdelay("$netconfstring Pinging nameserver:");
      $chkname = chkreach($if_ns);
      printresult($chkname);
    }
  } elsif ($netconf eq "dhcp") {
    ### Checking network config ###
    if ($ip_error != 1) {
      ### Checking gateway ###
      $if_gw = getnetinfo("gw", $if);
      printmsg("$netconfstring Gateway:", $if_gw);
      if ($if_gw !~ /^(1|2|3)$/) {
        printdelay("$netconfstring Pinging gateway:");
        $chkgw = chkreach($if_gw);
	printresult($chkgw);
      }
      $if_nm = getnetinfo("nm", $if);
      printmsg("$netconfstring Netmask:", $if_nm);
      $if_bc = getnetinfo("bc", $if);      
      printmsg("$netconfstring Broadcast:", $if_bc);
    }
    ### Checking DNS nameserver ###
    $if_ns = getnetinfo("ns", $if);
    printmsg("$netconfstring Nameserver:", $if_ns);
    if ($if_ns !~ /^(1|2|3)$/) {
      printdelay("$netconfstring Pinging nameserver:");
      $chkname = chkreach($if_ns);
      printresult($chkname);
    }
  }
}
